{"version":3,"sources":["context/peopleContext.js","components/Form.js","hooks.js","components/People.js","components/PeopleCount.js","components/NewestPerson.js","context/peopleReducer.js","context/types.js","App.js","serviceWorker.js","index.js"],"names":["peopleContext","createContext","people","addPerson","person","Form","context","useContext","PeopleContext","firstNameInput","useRef","callback","initialState","validate","useState","values","setValues","errors","setErrors","onChange","event","target","name","value","onSubmit","preventDefault","Object","keys","length","useForm","current","focus","firstName","lastName","trim","className","type","placeholder","ref","People","map","p","key","Math","random","PeopleCount","NewestPerson","newestPerson","useEffect","newestPersonName","document","title","console","log","state","action","newPeople","payload","App","props","useReducer","peopleReducer","dispatch","Provider","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.cb4e4a81.chunk.js","sourcesContent":["import { createContext } from \"react\";\r\n\r\nconst peopleContext = createContext({\r\n  people: [],\r\n  addPerson: (person) => {},\r\n});\r\n\r\nexport default peopleContext;\r\n","import React, { useContext, useRef } from \"react\";\r\nimport PeopleContext from \"../context/peopleContext\";\r\n\r\nimport { useForm } from \"../hooks\";\r\n\r\n// useMemo is used for computationally heavy operations\r\n// useEffect is executed between renders\r\n// useMemo is executed during a render\r\n// useMemo is executed the same as useEffect and takes the same callback but diff is it is executed during the render means before useEffect\r\n// useRef is used to create References it works the same as React.createRef\r\n\r\nconst Form = () => {\r\n  const context = useContext(PeopleContext);\r\n\r\n  const firstNameInput = useRef(null);\r\n\r\n  const validatePersonDataForm = (values) => {\r\n    let errors = {};\r\n    if (values.firstName.trim() === \"\") {\r\n      errors.firstName = \"First name must not be empty\";\r\n    }\r\n    if (values.lastName.trim() === \"\") {\r\n      errors.lastName = \"Last name must not be empty\";\r\n    }\r\n    return errors;\r\n  };\r\n\r\n  const addPersonFromForm = () => {\r\n    context.addPerson(values);\r\n    firstNameInput.current.focus();\r\n  };\r\n\r\n  const { values, errors, onChange, onSubmit } = useForm(\r\n    addPersonFromForm,\r\n    { firstName: \"\", lastName: \"\" },\r\n    validatePersonDataForm\r\n  );\r\n\r\n  // const printNumberOfPeople = () =>\r\n  //   console.log(`Number of people: ${context.people.length}`);\r\n\r\n  // useMemo(() => printNumberOfPeople(), [context.people]);\r\n\r\n  return (\r\n    <div className=\"col\">\r\n      <h2>Add a person:</h2>\r\n      <hr />\r\n      <form onSubmit={onSubmit}>\r\n        <div className=\"form-group\">\r\n          <input\r\n            type=\"text\"\r\n            className={`form-control ${errors.firstName && \"is-invalid\"}`}\r\n            name=\"firstName\"\r\n            placeholder=\"First Name\"\r\n            value={values.firstName}\r\n            ref={firstNameInput}\r\n            onChange={onChange}\r\n          />\r\n          {errors.firstName && (\r\n            <div className=\"invalid-feedback\">{errors.firstName}</div>\r\n          )}\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <input\r\n            type=\"text\"\r\n            className={`form-control ${errors.lastName && \"is-invalid\"}`}\r\n            name=\"lastName\"\r\n            placeholder=\"Last Name\"\r\n            value={values.lastName}\r\n            onChange={onChange}\r\n          />\r\n          {errors.lastName && (\r\n            <div className=\"invalid-feedback\">{errors.lastName}</div>\r\n          )}\r\n        </div>\r\n        <button className=\"btn btn-success\" type=\"submit\">\r\n          Add person\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import { useState } from \"react\";\r\n\r\nexport const useForm = (callback, initialState = {}, validate) => {\r\n  const [values, setValues] = useState(initialState);\r\n  const [errors, setErrors] = useState({});\r\n\r\n  const onChange = (event) => {\r\n    setValues({ ...values, [event.target.name]: event.target.value });\r\n  };\r\n\r\n  const onSubmit = (event) => {\r\n    event.preventDefault();\r\n\r\n    if (Object.keys(validate(values)).length === 0) {\r\n      callback();\r\n      setValues(initialState);\r\n      setErrors({});\r\n    } else {\r\n      setErrors(validate(values));\r\n    }\r\n  };\r\n\r\n  return {\r\n    onChange,\r\n    onSubmit,\r\n    errors,\r\n    values,\r\n  };\r\n};\r\n","import React, { useContext } from \"react\";\r\nimport PeopleContext from \"../context/peopleContext\";\r\n\r\nconst People = () => {\r\n  const context = useContext(PeopleContext);\r\n  return (\r\n    <div className=\"col\">\r\n      <h3>People</h3>\r\n      <hr />\r\n      {context.people.map((p) => (\r\n        <div key={Math.random() * 1000000000000}>\r\n          <p>\r\n            {p.firstName} {p.lastName}\r\n          </p>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default People;\r\n","import React, { useContext } from \"react\";\r\nimport PeopleContext from \"../context/peopleContext\";\r\n\r\nconst PeopleCount = () => {\r\n  const context = useContext(PeopleContext);\r\n  return <div className=\"text-center mt-4\">{context.people.length}</div>;\r\n};\r\n\r\nexport default PeopleCount;\r\n","import React, { useEffect, useContext } from \"react\";\r\nimport PeopleCount from \"./PeopleCount\";\r\nimport PeopleContext from \"../context/peopleContext\";\r\n\r\nconst NewestPerson = () => {\r\n  const context = useContext(PeopleContext);\r\n  const newestPerson = context.people[context.people.length - 1];\r\n  useEffect(() => {\r\n    const newestPersonName = `${newestPerson.firstName} ${newestPerson.lastName}`;\r\n    document.title = newestPersonName;\r\n    console.log(\"useEffect\");\r\n    return () => {\r\n      console.log(\"Unmounted\");\r\n    };\r\n  }, [newestPerson]);\r\n\r\n  return (\r\n    <div className=\"col col-sm-12\">\r\n      <h2 className=\"mt-4 text-center\">\r\n        Newest Person: {`${newestPerson.firstName} ${newestPerson.lastName}`}\r\n      </h2>\r\n      <PeopleCount />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NewestPerson;\r\n","import { ADD_PERSON } from \"./types\";\r\n\r\nconst addPerson = (person, state) => {\r\n  const newPeople = [...state.people, person];\r\n  return {\r\n    ...state,\r\n    people: newPeople,\r\n  };\r\n};\r\n\r\nexport default (state, action) => {\r\n  switch (action.type) {\r\n    case ADD_PERSON:\r\n      return addPerson(action.payload, state);\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","export const ADD_PERSON = \"ADD_PERSON\";\r\n","import React, { useReducer } from \"react\";\n\nimport Form from \"./components/Form\";\nimport People from \"./components/People\";\nimport NewestPerson from \"./components/NewestPerson\";\n\nimport PeopleContext from \"./context/peopleContext\";\nimport peopleReducer from \"./context/peopleReducer\";\nimport { ADD_PERSON } from \"./context/types\";\n\nconst App = (props) => {\n  const initialState = {\n    people: [\n      {\n        firstName: \"Jon\",\n        lastName: \"Snow\",\n      },\n      {\n        firstName: \"Jack\",\n        lastName: \"Ryan\",\n      },\n    ],\n  };\n\n  const [state, dispatch] = useReducer(peopleReducer, initialState);\n  const addPerson = (person) => {\n    dispatch({\n      type: ADD_PERSON,\n      payload: person,\n    });\n  };\n\n  return (\n    <PeopleContext.Provider\n      value={{\n        people: state.people,\n        addPerson,\n      }}\n    >\n      <div className=\"container mt-4\">\n        <div className=\"row\">\n          <Form />\n          <People />\n          <NewestPerson />\n        </div>\n      </div>\n    </PeopleContext.Provider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}